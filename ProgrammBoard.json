{"slots": {"0": {"name": "slot1", "type": {"events": [], "methods": []}}, "1": {"name": "slot2", "type": {"events": [], "methods": []}}, "2": {"name": "slot3", "type": {"events": [], "methods": []}}, "3": {"name": "slot4", "type": {"events": [], "methods": []}}, "4": {"name": "slot5", "type": {"events": [], "methods": []}}, "5": {"name": "slot6", "type": {"events": [], "methods": []}}, "6": {"name": "slot7", "type": {"events": [], "methods": []}}, "7": {"name": "slot8", "type": {"events": [], "methods": []}}, "8": {"name": "slot9", "type": {"events": [], "methods": []}}, "9": {"name": "slot10", "type": {"events": [], "methods": []}}, "-1": {"name": "unit", "type": {"events": [], "methods": []}}, "-3": {"name": "player", "type": {"events": [], "methods": []}}, "-2": {"name": "construct", "type": {"events": [], "methods": []}}, "-4": {"name": "system", "type": {"events": [], "methods": []}}, "-5": {"name": "library", "type": {"events": [], "methods": []}}}, "handlers": [{"code": "unit.setTimer(\"timer\",1)\n--json = require('json')\nscreen = findElements(\"ScreenUnit\")\nscreenCount = tableLen(screen)\ndatabank = findElements(\"DataBankUnit\")[1]\nMax_AGG_height = 200000 --export\n\nPreset_1 = 1000 --export\nPreset_2 = 6000 --export\nPreset_3 = 12000 --export\nPreset_4 = 20000 --export\n\n--DB_sync = true\nactive = true\nDB_sync = false --export\ncolor = {r=1,g=0.4,b=0} --export\n\nif DB_sync == true then \nRGB = (json.decode(databank.getStringValue('RGB')))\n-- get RGBH from DB or use static values --\nDBr = RGB.r*RGB.h\nDBg = RGB.g*RGB.h\nDBb = RGB.b*RGB.h\nelse\nDBr = color.r\nDBg = color.g\nDBb = color.b\nend\n\nif not databank then\n    system.print(\"ERROR: no databank found\")\n    unit.exit()\nelse\n    --Databank[1].setStringValue()\n   -- if Databank then Databank[1].setStringValue(\"RGB\",ScreenRawOutput) end\n    --Databank.getKeyList()\n    if not databank.hasKey(\"AGGAlt\") then \n        aggtarget = 1000\n        databank.setStringValue(\"AGGAlt\",json.encode(aggtarget))\n    else\n        local DBAGG = (json.decode(databank.getStringValue('AGGAlt')))\n        aggtarget = DBAGG\n    end\nend\n--Databank.setStringValue(\"AGGAltitude\",json.encode(aggtarget))\n\n\n", "filter": {"args": [], "signature": "onStart()", "slotKey": "-1"}, "key": "0"}, {"code": "agg = findElements(\"AntiGravityGeneratorUnit\")\nDatabank = findElements(\"DatabankUnit\")\ncore = findElements(\"CoreUnitDynamic\")[1]\n-----------------------------------------------------------------------\n\ngetGlobals()\n--system.print(\"altitude is \"..atmoaltitude)\n--system.print(\"closest planet is \"..currentPlanetName)\n--system.print(\"10% atmosphere \"..spaceEngineMinAltitude)\nif  agg[1].getFieldStrength () < 0.1 then\n    aggstate = 0 else aggstate = 1 end\n\naggbase = agg[1].getBaseAltitude()\naggtarget = agg[1].getTargetAltitude ()\n\nlocal shipVelocity = vec3(construct.getVelocity()):len()\naltitude = math.floor(core.getAltitude ())\n\n-- Gets speed along the vertical vector\nlocal velocity_vector, vertical_vector = vec3(construct.getVelocity()), (vec3(construct.getWorldPosition()) - vec3(planet.center)):normalize()\nlocal vertical_speed = -vertical_vector:dot(velocity_vector)\n\n--local speed = shipVelocity -- in m/s\n--vertical_speed = 30\nvertical_speed = velocity_vector:len()\ndistance_to_travel = math.abs(aggtarget-altitude)\nif vertical_speed > 0 then\n    traveltime = distance_to_travel/vertical_speed\n    traveltimescreen = get_time_from_seconds(traveltime)\n    --system.print(\"main=\"..traveltime)\nelse\n    traveltimescreen = '-'\nend\n--system.print(\"time=\"..traveltimescreen)\ndatabank.setStringValue(\"AGGAltitude\",json.encode(aggtarget))\nfor  i = 1, screenCount do \n    sendData = string.format(\"%s,%.3f,%s,%s,%s,%s,%s,%s,%s,%s,%.3f,%s,%.3f,%.3f,%.3f,\", aggstate, aggtarget, active,Preset_1,Preset_2,Preset_3,Preset_4, DBr, DBg, DBb,aggbase,traveltimescreen,Max_AGG_height,altitude,spaceEngineMinAltitude)\n    --system.print(sendData)\n    screen[i].setScriptInput(sendData)\n          end", "filter": {"args": [{"value": "timer"}], "signature": "onTimer(tag)", "slotKey": "-1"}, "key": "1"}, {"code": "agg = findElements(\"AntiGravityGeneratorUnit\")\nif  agg[1].getFieldStrength () < 0.1 then\n    aggstate = 0 else aggstate = 1 end\ncore = findElements(\"CoreUnitDynamic\")[1]\naggbase = agg[1].getBaseAltitude()\naggtarget = agg[1].getTargetAltitude ()\nlocal shipVelocity = vec3(construct.getVelocity()):len()\naltitude = math.floor(core.getAltitude ())\n\nlocal shipVelocity = vec3(construct.getVelocity()):len()\naltitude = math.floor(core.getAltitude ())\n\n-- Gets speed along the vertical vector\nlocal velocity_vector, vertical_vector = vec3(construct.getVelocity()), vec3(core.getWorldVertical())\nlocal vertical_speed = -vertical_vector:dot(velocity_vector)\n\n--local speed = shipVelocity -- in m/s\n--vertical_speed = 30\n\ndistance_to_travel = aggtarget-altitude\nif distance_to_travel * vertical_speed > 0 then\n    traveltime = distance_to_travel/vertical_speed\n    traveltimescreen = get_time_from_seconds(traveltime)\nelse\n    traveltimescreen = '-'\nend\n\nactive = false\nfor  i = 1, screenCount do screen[i].setScriptInput(string.format(\"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\", aggstate, aggtarget, active,Preset_1,Preset_2,Preset_3,Preset_4, DBr, DBg, DBb,aggbase,traveltimescreen,Max_AGG_height,altitude))\n          end", "filter": {"args": [], "signature": "onStop()", "slotKey": "-1"}, "key": "2"}, {"code": "-----------------------------------------------------------------------\nscreen = findElements(\"ScreenUnit\")\nscreenCount = tableLen(screen)\n-----------------------------------------------------------------------\nagg = findElements(\"AntiGravityGeneratorUnit\")\naggCount = tableLen(agg)\n-----------------------------------------------------------------------\n\nlocal handlers = {}\n\nhandlers['1']=function() for i = 1, aggCount do agg[i].toggle()  end end\nhandlers['Preset_1']=function() for i = 1, aggCount do agg[i].setTargetAltitude (Preset_1)  end end\nhandlers['Preset_2']=function() for i = 1, aggCount do agg[i].setTargetAltitude (Preset_2)  end end\nhandlers['Preset_3']=function() for i = 1, aggCount do agg[i].setTargetAltitude (Preset_3)  end end\nhandlers['Preset_4']=function() for i = 1, aggCount do agg[i].setTargetAltitude (Preset_4)  end end\nhandlers['manualAlt']=function(alt) for i = 1, aggCount do agg[i].setTargetAltitude (alt)  end end\n-----------------------------------------------------------------------\nfor i = 1, screenCount do\n    local ok, err = pcall(function()\n        local output = screen[i].getScriptOutput()\n        if #output > 0 then\n            screen[i].clearScriptOutput()\n                \n            local parsed = json.decode(output)\n            local command, args = parsed[1], table.move(parsed, 2, #parsed, 1)\n    \n            if handlers[command] then handlers[command](table.unpack(args or {})) end\n        end\n    end)\nend\n-----------------------------------------------------------------------\n\n", "filter": {"args": [], "signature": "onUpdate()", "slotKey": "-4"}, "key": "3"}, {"code": "json = require('json')\n--------------------------------------------------------------------------------------\n-- find elements\nfunction findElements(ClassName)\n    local FoundElements = {}\n    for key, value in pairs(unit) do\n        if type(value) == \"table\" and type(value.export) == \"table\" then\n            if value.getClass then\n                if value.getClass() == ClassName then\n                    table.insert(FoundElements, value)\n                end\n            end\n        end\n    end\n    return FoundElements\nend\n--------------------------------------------------------------------------------------\n-- tableLen\nfunction tableLen(T)\n    local count = 0\n    for _ in pairs(T) do\n        count = count + 1\n    end\n    return count\nend\n--------------------------------------------------------------------------------------\n\n\n\nfunction get_time_from_seconds(seconds)\n  local parts = {}\n  \n  if seconds > 86400 then\n    local days = math.floor(seconds / 86400)\n    table.insert(parts, days .. 'd')\n    seconds = seconds - 86400 * days\n  end\n  \n  if seconds > 3600 then\n    local hours = math.floor(seconds / 3600)\n    table.insert(parts, hours .. 'h')\n    seconds = seconds - 3600 * hours\n  end\n  \n  if seconds > 60 then\n    local minutes = math.floor(seconds / 60)\n    table.insert(parts, minutes .. ' min')\n    seconds = seconds - 60 * minutes\n  end\n\n  if seconds > 0 then\n    table.insert(parts, math.floor(seconds) .. ' sec')\n  end\n\n  return table.concat(parts, ' ')\nend", "filter": {"args": [], "signature": "onStart()", "slotKey": "-5"}, "key": "4"}, {"code": "local Atlas = require \"atlas\"\nHelios = Atlas[0]\n\nfunction getGlobals()\n     currentWorldPos = vec3(construct.getWorldPosition())\n     closestPlanetIndex = 0\n     local planetDistance = 999999999999\n     for i, v in pairs(Helios) do\n      if (currentWorldPos - vec3(v.center)):len() < planetDistance then\n       planetDistance = (currentWorldPos - vec3(v.center)):len()\n       closestPlanetIndex = i\n      end\n     end\n     planet = Helios[closestPlanetIndex]\n     currentPlanetName = planet.name[1]\n     currentPlanetRadius = planet.radius --TODO Remove?\n     currentPlanetCenter = planet.center\n     currentPlanetGM = planet.GM\n     currentPlanetMaxStatic = planet.maxStaticAltitude\n     hasAtmosphere = planet.hasAtmosphere\n     local altTable = { [1]=6637, [2]=3426, [4]=7580, [26]=4242, [27]=4150, [3]=21452, [6]=4498, [7]=6285, [8]=3434, [9]=5916 } -- Measured min space engine altitudes for: Madis, Alioth, Talemai, Sanctuary, Haven, Sicari, Sinnen, Thades, Teoma, Jago\n     spaceEngineMinAltitude = altTable[planet.id] or 0.5353125*(planet.atmosphereThickness)\n     noAtmosphericDensityAltitude = planet.atmosphereThickness or 0\n\n     -- get altitude --\n     local function vectorLen(x,y,z)\n      return math.sqrt(x * x + y * y + z * z)\n     end\n     local cWCOM = construct.getWorldCenterOfMass()\n     local cWCOMx, cWCOMy, cWCOMz = cWCOM[1], cWCOM[2], cWCOM[3]\n     local cPCx, cPCy, cPCz = currentPlanetCenter[1], currentPlanetCenter[2], currentPlanetCenter[3]\n     atmoaltitude = vectorLen(cWCOMx-cPCx, cWCOMy-cPCy, cWCOMz-cPCz) - planet.radius or 0\nend\n", "filter": {"args": [], "signature": "onStart()", "slotKey": "-5"}, "key": "5"}], "methods": [], "events": []}
